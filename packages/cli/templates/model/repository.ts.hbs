import type {
  I{{ modelName }}Repository,
  I{{ modelName }}Select,
  I{{ modelName }}Where,
} from './interface'

import { Repository } from 'typeorm'
import { Injectable } from '@nestjs/common'
import { InjectRepository } from '@nestjs/typeorm'

import { DEFAULT_PAGESIZE } from '~/common/constants'
import { toPaginationParams } from '~/utils/pagination'

import { {{ modelName }}Entity } from './entity'

const defaultSelect: I{{ modelName }}Select = ['id', 'name', 'sort', 'updatedTime']

@Injectable()
export class {{ modelName }}Repository implements I{{ modelName }}Repository {
  constructor(
    @InjectRepository({{ modelName }}Entity)
    private readonly repo: Repository<{{ modelName }}Entity>,
  ) {}

  /**
   * @inheritdoc
   */
  async findAndCount(
    where: I{{ modelName }}Where,
    page: number,
    pagesize = DEFAULT_PAGESIZE,
  ) {
    const {
      skip,
      take,
    } = toPaginationParams(page, pagesize)

    const [list, total] = await this.repo.findAndCount({
      select: defaultSelect,
      where,
      skip,
      take,
      order: {
        sort: 'ASC',
        updatedTime: 'DESC',
      },
    })

    return {
      list,
      total,
      page,
      pagesize: take,
    }
  }

  /**
   * @inheritdoc
   */
  async find(
    where: I{{ modelName }}Where,
    select: I{{ modelName }}Select = defaultSelect,
  ) {
    return await this.repo.find({
      select,
      where,
      order: {
        sort: 'ASC',
        updatedTime: 'DESC',
      },
    })
  }

  /**
   * @inheritdoc
   */
  async findById(
    id: number,
    select: I{{ modelName }}Select = defaultSelect,
  ) {
    return await this.repo.findOne({
      select,
      where: { id },
    })
  }

  /**
   * @inheritdoc
   */
  async exists(where: I{{ modelName }}Where) {
    return await this.repo.exists({
      where,
    })
  }

  /**
   * @inheritdoc
   */
  async create(data: Partial<{{ modelName }}Entity>) {
    const {{ model }} = this.repo.create(data)

    return await this.repo.save({{ model }})
  }

  /**
   * @inheritdoc
   */
  async update(
    {{ model }}: {{ modelName }}Entity,
    data: Partial<{{ modelName }}Entity>,
  ) {
    return await this.repo.save({{ model }})
  }

  /**
   * @inheritdoc
   */
  async destroy(id: number) {
    await this.repo.delete(id)
  }
}
